"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 2.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)


BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 's$d_o+jtbuj)9qkhp7pw_=yycny#(+_8ad0tf1&l6gc$oi!a7b'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False #注意false会导致静态文件404

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'firstapp', #个人测试用的app,上线删掉
    'users', #用户
    'blog', #博客
    'mdeditor',  # markdown编辑器 django-mdeditor
    'comment', #自定义评论
    # 'ckeditor', #django-ckeditor,富文本编辑器,里用来评论,https://blog.csdn.net/qq_15028721/article/details/119985342
    # 'mptt', #django-mptt多级评论
    'taggit', #django-taggit标签
    'democelery', #celery的官方demo
    'django_celery_results', #celery使用Django ORM/Cache 作为结果后端，,我使用redis,pip install django-celery-results
    'camera',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',  #防止markdown上传图片后图片地址没有路由
    # 'middleware.mymiddleware.OverTime', #middleware包内的自定义中间件
    # 'middleware.mymiddleware.MyMW', #middleware包内的自定义中间件
]

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 'DIRS': [],
        'DIRS':[os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'builtins': ['django.templatetags.static'] #添加，这样就不需要每次在模板中使用到static 都需要先{% load static %}一下了，可以直接使用
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'webfacerecognition', #你的数据库名称 数据库需要自己提前建好
        'USER': 'root', #你的数据库用户名
        'PASSWORD': 'mysql123456', #你的数据库密码
        'HOST': '127.0.0.1', #l你的数据库主机，留空默认为locahost
        'PORT': '3306', #你的数据库端口
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# https://docs.djangoproject.com/en/2.2/howto/static-files/
# 在这里，当访问静态文件时，会自动添加 static
# 例如访问默认应用 admin 时，他会加载 admin/css/base.css，这里配置后，加载的资源链接变为 /static/admin/css/base.css
# 也可以写为：STATIC_URL = 'http://192.168.0.0/static/' 这样的形式（方便CDN）
STATIC_URL = '/static/'
# 配置公共的全局静态文件夹,在工程目录下新建static文件夹；至于非全局则每个应用的静态文件则为 app/static/app/xxx此路径格式
# 在开发环境下，访问静态资源，可以直接访问这里配置的路径下的文件，例如web访问url为 /static/a.html，实际上访问的是根目录下 /static/a.html 这个文件
# 在生产环境下，会将这些目录下的文件复制到 STATIC_ROOT 这里配置的目录中（注意，如果有同名文件，可能会被覆写，他会提示你）
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]

# 当运行 python manage.py collectstatic
# 用来将所有 STATICFILES_DIRS 中所有文件夹中的文件，以及各app中的static中的文件，都复制到STATIC_ROOT路径里
#集中之后，方便部署
# STATIC_ROOT=os.path.join(BASE_DIR,"static/")#错误
STATIC_ROOT=os.path.join(BASE_DIR,"/static/")#正确,官方写法
# 结果141 static files copied to 'F:\static'.

# STATIC_ROOT=os.path.join(BASE_DIR,"collectstatic")#个人写法
#141 static files copied to 'F:\pythonpic52projects\52projects\16.djangobetter\mysite\collectstatic'.


# 配置Apache把/static/映射到STATIC_ROOT


#手动添加的session配置
# SESSION_COOKIE_NAME = "sessionid"  # Session的cookie保存在浏览器上时的key，即：sessionid＝随机字符串
# SESSION_COOKIE_PATH = "/"  # Session的cookie保存的路径
# SESSION_COOKIE_DOMAIN = None  # Session的cookie保存的域名
# SESSION_COOKIE_SECURE = False  # 是否Https传输cookie
# SESSION_COOKIE_HTTPONLY = True  # 是否Session的cookie只支持http传输
# SESSION_COOKIE_AGE = 86400 # Session的cookie失效日期（一天）（数字为秒数）,实际默认14天
# SESSION_EXPIRE_AT_BROWSER_CLOSE = False  # 是否关闭浏览器使得Session过期
# SESSION_SAVE_EVERY_REQUEST = False  # 是否每次请求都保存Session，默认修改之后才保存


#media资源使用,django把上传的文件统称为media资源，需要配置MEDIA_URL路由和MEDIA_ROOT
MEDIA_URL='/media/' #localhost：8000/media来加载，例如头像
MEDIA_ROOT=os.path.join(BASE_DIR,'media')  #(上传资源根目录)
#还需要media在主路由手动添加 才使其能访问能在网页里加载，
# from django.conf import settings
# from django.conf.urls.static import static
# urlpatterns += static(settings.MEDIA_URL,document_root=settings.MEDIA_ROOT)才能生效
#media需要自己创建或者os.makedirs代码创建

#缓存官方文档https://docs.djangoproject.com/en/3.1/topics/cache/
#配置数据库缓存 使用mysql
# 缓存配置后需要执行python manage.py createcachetable才能建立表
# CACHES = {
#     'default': {
#         'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
#         'LOCATION': 'my_cache_table', #指定数据库缓存表，需要python manage.py createcachetable;不知道可以python manage.py查看命令提示
#         'TIMEOUT':300,  #缓存保存时间,s,默认300s
#         'OPTIONS':{
#             'MAX_ENTRIES': 300, #最大缓存数据条数
#             'CULL_FREQUENCY': 2,  #达最大,删除1/x的缓存
#         }
#     }
# }

#缓存配置后需要执行python manage.py createcachetable

# #文件系统缓存
# CACHES = {
#     'default': {
#         'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
#         'LOCATION': '/var/tmp/django_cache',#这个是文件夹的路径
#         #'LOCATION': 'c:\test\cache',#windows下示例
#     }
# }

#本地内存缓存
# CACHES = {
#     'default': {
#         'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
#         'LOCATION': 'unique-snowflake'
#     }
# }

# 普通redis安装配置参考https://blog.csdn.net/m0_67402013/article/details/124016331
# 配置数据库缓存使用redis
# 参考http://t.zoukankan.com/wsongl-p-14463782.html
#需要python manage.py createcachetable
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379', #可以带/0 /1等表示指定数据库，默认0
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'CONNECTION_POOL_KWARGS': {
                'max_connections': 1000
            },
            # 'PASSWORD': '123456', # 如果有设置了redis-server密码在这里设置
        }
    }
}


# 发送邮件设置
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' # 固定写法
EMAIL_HOST = 'smtp.qq.com' # 腾讯QQ邮箱 SMTP 服务器地址
EMAIL_PORT = 25  # SMTP服务的端口号
EMAIL_HOST_USER = '1476094297@qq.com'  # 发送邮件的QQ邮箱
EMAIL_HOST_PASSWORD = 'ltjyfnayvcxojeie'  # 在QQ邮箱->设置->帐户->“POP3/IMAP......服务” 里得到的在第三方登录QQ邮箱授权码
EMAIL_USE_TLS = True  # 与SMTP服务器通信时，是否启动TLS链接(安全链接)默认false



#部署 -替代`python3 manage.py runserver` 方法启动服务器
#如果是linux配置uwsgi用 uwsgi  pip install uwsgi +nginx

#windows选择pip install mod_wsgi(注意对应版本)+apache
#参考官方文档https://docs.djangoproject.com/zh-hans/2.2/howto/deployment/wsgi/modwsgi/
# 本处使用apache+mod_wsgi

# nginx反向代理,后续配置,可以尝试用nginx代理apache



# 关闭调试模式后,
#配置错误报告接收方
ADMINS=[('gly',"1476094297@qq.com"),]
#发送错误的报告方
SERVER_EMAIL=EMAIL_HOST_USER
#邮件过滤敏感信息，暂时未配置

# django-mdeditor 设置,还有路由,
MDEDITOR_CONFIGS = {
    'default': {
        'width': '90%',  # Custom edit box width
        'height': 500,  # Custom edit box height
        'toolbar': ["undo", "redo", "|",
                    "bold", "del", "italic", "quote", "ucwords", "uppercase", "lowercase", "|",
                    "h1", "h2", "h3", "h5", "h6", "|",
                    "list-ul", "list-ol", "hr", "|",
                    "link", "reference-link", "image", "code", "preformatted-text", "code-block", "table", "datetime",
                    "emoji", "html-entities", "pagebreak", "goto-line", "|",
                    "help", "info",
                    "||", "preview", "watch", "fullscreen"],  # custom edit box toolbar
        'upload_image_formats': ["jpg", "jpeg", "gif", "png", "bmp", "webp"],  # image upload format type
        'image_folder': 'editor',  # 图片保存路径
        'theme': 'dark',  # 工具栏显示主题, dark / default
        'preview_theme': 'default',  # 预览区显示主题, dark / default
        'editor_theme': 'default',  # 编辑区显示主题, pastel-on-dark / default
        'toolbar_autofixed': True,  # 工具栏是否固定在顶部
        'search_replace': True,  # 是否打开搜索替换
        'emoji': True,  # 是否打开表情显示
        'tex': True,  # 是否打开 tex 图表显示
        'flow_chart': True,  # 是否打开流程图显示
        'sequence': True,  # 是否打开时序图显示
        'watch': True,  # 实时预览
        'lineWrapping': True,  # 是否换行
        'lineNumbers': True,  # 是否显示行数
        'language': 'zh'  # 语言
    }

}

#待使用
# ckeditor富文本编辑器配置,参考https://blog.csdn.net/qq_15028721/article/details/119985342
# 用来评论参考https://www.likecs.com/show-203470532.html
# 富文本是以类似html的格式进行保存的，因此还要在展示评论的代码加入|safe过滤器
#使用ck的工具栏并修改，宽度自适应
CKEDITOR_CONFIGS= {
    # django-ckeditor默认使用default配置
    'default': {
        # 编辑器宽度自适应
        'width':'auto',
        'height':'300px',
        # tab键转换空格数
        'tabSpaces': 4,
        # 工具栏风格
        'toolbar': 'Custom',
        # 工具栏按钮
        'toolbar_Custom': [
            # 预览、表情
            ['Preview','Smiley'],
            # 字体风格
            ['Bold', 'Italic', 'Underline', 'RemoveFormat', 'Blockquote'],
            # 字体颜色
            ['TextColor', 'BGColor'],
            #格式、字体、大小
            ['Format','Font','FontSize'],
            # 链接
            ['Link', 'Unlink'],
            # 列表
            ['Image', 'NumberedList', 'BulletedList'],
            #居左，居中，居右
            ['JustifyLeft','JustifyCenter','JustifyRight','JustifyBlock'],
            # 最大化
            ['Maximize']
        ],
        # 加入代码块插件
        'extraPlugins': ','.join(['codesnippet','image2','filebrowser','widget', 'lineutils']),
    },
    #评论
    'comment': {
        # 编辑器宽度自适应
        'width': 'auto',
        'height': '140px',
        # tab键转换空格数
        'tabSpaces': 4,
        # 工具栏风格
        'toolbar': 'Custom',
        # 工具栏按钮
        'toolbar_Custom': [
            # 表情 代码块
            ['Smiley', 'CodeSnippet'],
            # 字体风格
            ['Bold', 'Italic', 'Underline', 'RemoveFormat', 'Blockquote'],
            # 字体颜色
            ['TextColor', 'BGColor'],
            # 链接
            ['Link', 'Unlink'],
            # 列表
            ['NumberedList', 'BulletedList'],
        ],
        # 加入代码块插件
        'extraPlugins': ','.join(['codesnippet']),
    }
}


#celery配置 4.4.2(异步，用于任务队列执行)
# 参考https://blog.csdn.net/weixin_39980711/article/details/110437598?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-1-110437598-blog-105562213.pc_relevant_multi_platform_whitelistv1&spm=1001.2101.3001.4242.2&utm_relevant_index=4
#参考https://blog.csdn.net/sinat_41292836/article/details/105795042
#https://docs.celeryq.dev/en/latest/django/first-steps-with-django.html#using-celery-with-django
#celery默认也是有自己的配置文件的，名为celeryconfig.py, 但由于管理多个配置文件很麻烦，我们把celery的配置参数也写在django的配置文件里。或者新建一个celeryconfig，from .celeryconfig import *
# 配置celery时区，默认时UTC。
if USE_TZ:
    timezone = TIME_ZONE

# celery配置redis作为broker。redis有16个数据库，编号0~15，这里使用第1个。如果有密码带上
broker_url = 'redis://127.0.0.1:6379/1'

# 设置存储结果的后台
result_backend = 'redis://127.0.0.1:6379/1'

# 可接受的内容格式
accept_content = ["json"]
# 任务序列化数据格式
task_serializer = "json"
# 结果序列化数据格式
result_serializer = "json"

# 可选参数：给某个任务限流
# task_annotations = {'tasks.my_task': {'rate_limit': '10/s'}}

# 可选参数：给任务设置超时时间。超时立即中止worker
# task_time_limit = 10 * 60

# 可选参数：给任务设置软超时时间，超时抛出Exception
# task_soft_time_limit = 10 * 60

# 可选参数：如果使用django_celery_beat进行定时任务
# beat_scheduler = "django_celery_beat.schedulers:DatabaseScheduler"

# 更多选项见
# https://docs.celeryproject.org/en/stable/userguide/configuration.html


#日志配置 #学习https://www.dusaiphoto.com/article/68/
#日志的输出文件的目录logs/一定要提前创建好，并且确保项目拥有此目录的写入权限。
#DEBUG级别会包含所有的数据库查询记录,默认情况下，仅在调试模式下才会显示DEBUG级别的消息日志，部署在线上时只会将INFO或以上的信息进行记录。
# DEBUG：排查故障时使用的低级别系统信息，通常开发时使用
# INFO：一般的系统信息，并不算问题
# WARNING：描述系统发生的小问题的信息，但通常不影响功能
# ERROR：描述系统发生的大问题的信息，可能会导致功能不正常
# CRITICAL：描述系统发生严重问题的信息，应用程序有崩溃风险

# 下方配置中定义了两个格式化器：
#
# verbose：详细的格式化器，依次输出：消息级别、发生时间、抛出模块、进程ID、线程ID、提示信息
# simple：简要的格式化器，仅输出消息级别和提示信息
# 一个过滤器：
#
# require_debug_true：使用此过滤器的消息仅在调试时才会生效
# 三个处理器：
#
# console：处理INFO以上级别消息，输出简要信息到命令行中；此处理器仅在调试模式生效
# mail_admins：处理ERROR以上级别消息，输出详细信息到Email中
# file：处理WARNING以上级别消息，输出详细信息到文件中
# 两个记录器：
#
# django：将django产生的所有消息转交给console处理器
# django.request：将网络请求相关消息转交给file、mail_admins这两个处理器。注意这里的'propagate': False使得此记录器处理过的消息就不再让django记录器再次处理了
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'verbose',
        },
        'file': {
            'level': 'WARNING',
            # 'class': 'logging.FileHandler',
            #日志分割新增内容
            'class': 'logging.handlers.TimedRotatingFileHandler', #Python内置的随时间分割日志文件的模块
            'when': 'midnight', #分割时间为凌晨
            'backupCount': 30, #日志文件保存日期为30天
            'filename': os.path.join(BASE_DIR, 'logs/debug.txt'),
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'propagate': True,
        },
        'django.request': {
            'handlers': ['file', 'mail_admins'],
            'level': 'WARNING',
            'propagate': False,
        },
    }
}


#加载本地用的初始的测试配置，部署不需要给这个文件
try:
    from .lcoal_settings import *
except:
    pass

